import React, { useRef, useState } from 'react';
import DownloadIcon from '../icons/DownloadIcon';
import SpeakerIcon from '../icons/SpeakerIcon';
import StopCircleIcon from '../icons/StopCircleIcon';
import { formatMarkdown } from '../../utils/markdownParser';
import { useTextToSpeech } from '../../hooks/useTextToSpeech';
import Feedback from '../Feedback';
import { exportTextFile, exportElementAsPDF } from '../../utils/exportUtils';
import { getISODate, getFormattedDate } from '../../utils/dateUtils';
import { cleanAnalysisForSpeech } from '../../utils/stringUtils';
import PauseIcon from '../icons/PauseIcon';
import { useCaseAnalysis } from '../../hooks/useCaseAnalysis';
import FilePdfIcon from '../icons/FilePdfIcon';
import SpinnerIcon from '../icons/SpinnerIcon';
import AlertTriangleIcon from '../icons/AlertTriangleIcon';
import FileTextIcon from '../icons/FileTextIcon';
import LightbulbIcon from '../icons/LightbulbIcon';


const AnalysisResult: React.FC = () => {
    const { analysisResponse: response } = useCaseAnalysis();
    const reportRef = useRef<HTMLDivElement>(null);
    const { isSpeaking, isPaused, speak, cancel, pause, resume } = useTextToSpeech();
    const [isExportingPdf, setIsExportingPdf] = useState(false);
    
    if (!response) {
        return (
            <div className="text-center p-4 text-gray-400">
                <p>No analysis data to display.</p>
            </div>
        );
    }
    
    const generateReportText = () => {
        let text = `CUSTODYBUDDY.COM - AI CASE ANALYSIS\n`;
        text += `========================================\n\n`;
        text += `DISCLAIMER: ${response.disclaimer}\n\n`;
        text += `----------------------------------------\n`;
        text += `SUMMARY\n`;
        text += `----------------------------------------\n`;
        text += `${response.summary}\n\n`;
        text += `----------------------------------------\n`;
        text += `KEY CLAUSES & OBLIGATIONS\n`;
        text += `----------------------------------------\n`;
        response.keyClauses?.forEach(item => {
            text += `- Clause: ${item.clause} (Source: ${item.source})\n`;
            text += `  Explanation: ${item.explanation}\n\n`;
        });
        text += `\n`;
        text += `----------------------------------------\n`;
        text += `POTENTIAL DISCREPANCIES & FLAGS\n`;
        text += `----------------------------------------\n`;
        response.discrepancies?.forEach(item => {
            text += `- CONFLICT: ${item.description}\n`;
            text += `  Sources: ${item.sources.join(', ')}\n\n`;
        });
        text += `\n`;
        text += `----------------------------------------\n`;
        text += `SUGGESTED NEXT STEPS\n`;
        text += `----------------------------------------\n`;
        text += `${response.suggestedNextSteps}\n\n`;
        
        return text;
    };
    
    const handleExportTxt = () => {
        if (!response) return;
        const date = getISODate();
        const filename = `CustodyBuddy-Analysis-${date}.txt`;
        exportTextFile(generateReportText(), filename);
    };
    
    const handleExportPdf = async () => {
        if (!reportRef.current) return;
        
        setIsExportingPdf(true);
        try {
            const isoDate = getISODate();
            const friendlyDate = getFormattedDate();
            const filename = `CustodyBuddy-Analysis-${isoDate}.pdf`;
            const headerText = `AI Case Analysis - Generated by CustodyBuddy.com on ${friendlyDate}`;
            await exportElementAsPDF(reportRef.current, filename, headerText);
        } catch (error) {
            console.error("Failed to export PDF:", error);
            alert("Sorry, there was an issue creating the PDF. Please try again.");
        } finally {
            setIsExportingPdf(false);
        }
    };

    const handlePlayPause = () => {
        if (!isSpeaking) {
            const plainText = cleanAnalysisForSpeech(response);
            speak(plainText);
        } else if (isPaused) {
            resume();
        } else {
            pause();
        }
    };

    const handleStop = () => {
        cancel();
    };

    return (
        <div className="mt-6 animate-fade-in-up">
            <div className="flex flex-col gap-4 md:flex-row md:justify-between items-start md:items-center p-4 bg-slate-800 border border-slate-700 rounded-t-lg">
                 <h3 className="text-xl font-bold text-amber-400 flex-shrink-0">AI Analysis Report</h3>
                 <div className="flex flex-wrap items-center justify-start gap-2">
                    <button
                        onClick={handlePlayPause}
                        className="flex items-center gap-2 bg-slate-700 hover:bg-slate-600 text-white font-semibold py-2 px-4 rounded-lg transition-all"
                        aria-label={!isSpeaking ? "Read analysis aloud" : isPaused ? "Resume reading" : "Pause reading"}
                    >
                        {!isSpeaking || isPaused ? <SpeakerIcon className="w-4 h-4" /> : <PauseIcon className="w-4 h-4" />}
                        <span>{!isSpeaking ? 'Read Aloud' : isPaused ? 'Resume' : 'Pause'}</span>
                    </button>
                    {isSpeaking && (
                         <button
                            onClick={handleStop}
                            className="flex items-center gap-2 bg-slate-700 hover:bg-slate-600 text-white font-semibold py-2 px-4 rounded-lg transition-all"
                            aria-label="Stop reading analysis"
                        >
                            <StopCircleIcon className="w-4 h-4" />
                            <span>Stop</span>
                        </button>
                    )}
                     <button
                        onClick={handleExportTxt}
                        className="flex items-center gap-2 bg-slate-700 hover:bg-slate-600 text-white font-semibold py-2 px-4 rounded-lg transition-all"
                        aria-label="Export analysis as a text file"
                    >
                        <DownloadIcon className="w-4 h-4" />
                        <span>TXT</span>
                    </button>
                     <button
                        onClick={handleExportPdf}
                        disabled={isExportingPdf}
                        className="flex items-center gap-2 bg-slate-700 hover:bg-slate-600 text-white font-semibold py-2 px-4 rounded-lg transition-all disabled:opacity-70 disabled:cursor-wait"
                        aria-label={isExportingPdf ? "Creating PDF, please wait" : "Export analysis as a PDF file"}
                    >
                        {isExportingPdf ? (
                            <SpinnerIcon className="w-4 h-4" />
                        ) : (
                            <FilePdfIcon className="w-4 h-4" />
                        )}
                        <span>PDF</span>
                    </button>
                 </div>
            </div>
            <div ref={reportRef} className="p-6 bg-slate-900 border-x border-b border-slate-700 rounded-b-lg space-y-8">
                
                {/* Section: Summary */}
                <section>
                    <h4 className="text-lg font-bold text-gray-200 mb-3">Summary</h4>
                    <div
                        className="text-gray-300 leading-relaxed prose prose-invert prose-p:my-2 prose-ul:my-2 prose-strong:text-amber-400 max-w-none"
                        dangerouslySetInnerHTML={{ __html: formatMarkdown(response.summary) }}
                    />
                </section>

                {/* Section: Discrepancies */}
                {response.discrepancies?.length > 0 && (
                     <section className="p-4 bg-red-900/20 border border-red-500/50 rounded-lg">
                        <h4 className="text-lg font-bold text-red-400 mb-3 flex items-center gap-2">
                            <AlertTriangleIcon className="w-5 h-5" />
                            Potential Discrepancies & Flags
                        </h4>
                        <div className="space-y-4">
                            {response.discrepancies.map((item, i) => (
                                <div key={i} className="text-sm">
                                    <p className="text-red-300">{item.description}</p>
                                    <p className="text-xs text-red-400/80 mt-1">Sources: {item.sources.join(', ')}</p>
                                </div>
                            ))}
                        </div>
                    </section>
                )}

                {/* Section: Key Clauses */}
                {response.keyClauses?.length > 0 && (
                    <section>
                        <h4 className="text-lg font-bold text-gray-200 mb-3">Key Clauses & Obligations</h4>
                        <div className="space-y-4">
                            {response.keyClauses.map((item, i) => (
                                <div key={i} className="p-3 bg-slate-800 rounded-md border border-slate-700">
                                    <p className="text-gray-300 font-semibold italic">"{item.clause}"</p>
                                    <p className="text-gray-400 mt-2 text-sm">{item.explanation}</p>
                                    <p className="text-xs text-amber-400/80 mt-2">Source: {item.source}</p>
                                </div>
                            ))}
                        </div>
                    </section>
                )}
                
                {/* Section: Next Steps */}
                <section>
                    <h4 className="text-lg font-bold text-gray-200 mb-3 flex items-center gap-2">
                       <LightbulbIcon className="w-5 h-5 text-amber-400" />
                       Suggested Next Steps
                    </h4>
                    <div
                        className="text-gray-300 leading-relaxed prose prose-invert prose-p:my-2 prose-ul:my-2 prose-strong:text-amber-400 max-w-none"
                        dangerouslySetInnerHTML={{ __html: formatMarkdown(response.suggestedNextSteps) }}
                    />
                </section>
                
                 {/* Section: Action Items */}
                {response.actionItems?.length > 0 && (
                    <section>
                        <h4 className="text-lg font-bold text-gray-200 mb-3">Action Items & Deadlines</h4>
                        <ul className="list-disc pl-5 space-y-2 text-gray-300">
                            {response.actionItems.map((item, i) => (
                               <li key={i}>
                                   {item.item}
                                   {item.deadline && <span className="ml-2 text-sm font-semibold text-amber-400">(Deadline: {item.deadline})</span>}
                                   <span className="ml-2 text-xs text-gray-500">(Source: {item.source})</span>
                               </li>
                            ))}
                        </ul>
                    </section>
                )}

                {/* Section: Legal Jargon */}
                {response.legalJargon?.length > 0 && (
                    <section>
                        <h4 className="text-lg font-bold text-gray-200 mb-3">Legal Jargon Explained</h4>
                         <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {response.legalJargon.map((item, i) => (
                                <div key={i} className="p-3 bg-slate-800 rounded-md">
                                    <p className="font-semibold text-amber-300">{item.term}</p>
                                    <p className="text-sm text-gray-400 mt-1">{item.explanation}</p>
                                </div>
                            ))}
                        </div>
                    </section>
                )}

                {/* Section: Document Types */}
                {response.documentTypes?.length > 0 && (
                    <section>
                        <h4 className="text-lg font-bold text-gray-200 mb-3">Analyzed Documents</h4>
                        <div className="flex flex-wrap gap-2">
                             {response.documentTypes.map((item, i) => (
                                <div key={i} className="flex items-center gap-2 bg-slate-800 text-sm text-gray-300 px-3 py-1 rounded-full">
                                   <FileTextIcon className="w-4 h-4 text-amber-400" />
                                   <span>{item.source}: <span className="font-semibold">{item.type}</span></span>
                                </div>
                            ))}
                        </div>
                    </section>
                )}
               
                {/* Disclaimer & Feedback */}
                <div className="pt-6 border-t border-slate-700/50 space-y-4">
                    <p className="text-xs text-gray-500 italic">{response.disclaimer}</p>
                    <div className="no-pdf">
                        <Feedback />
                    </div>
                </div>
            </div>
        </div>
    );
};

export default AnalysisResult;