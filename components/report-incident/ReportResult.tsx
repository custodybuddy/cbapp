import React, { useRef, useState, useCallback } from 'react';
import { useIncidentReportState, useIncidentReportActions } from '../../hooks/useIncidentReporter';
import { useTextToSpeech } from '../../hooks/useTextToSpeech';
import { useTextSizer, MIN_SCALE, MAX_SCALE } from '../../hooks/useTextSizer';

import { exportTextFile, exportElementAsPDF } from '../../utils/exportUtils';
import { getISODate, getFormattedDate } from '../../utils/dateUtils';
import { formatMarkdown } from '../../utils/markdownParser';
import { cleanReportForSpeech, linkifyLegislation } from '../../utils/stringUtils';

import Feedback from '../Feedback';
import ExternalLinkIcon from '../icons/ExternalLinkIcon';
import RotateCwIcon from '../icons/RotateCwIcon';
import SpeakerIcon from '../icons/SpeakerIcon';
import StopCircleIcon from '../icons/StopCircleIcon';
import PauseIcon from '../icons/PauseIcon';
import DownloadIcon from '../icons/DownloadIcon';
import FilePdfIcon from '../icons/FilePdfIcon';
import SpinnerIcon from '../icons/SpinnerIcon';
import LightbulbIcon from '../icons/LightbulbIcon';
import AlertTriangleIcon from '../icons/AlertTriangleIcon';
import GavelIcon from '../icons/GavelIcon';
import FileTextIcon from '../icons/FileTextIcon';
import ZoomInIcon from '../icons/ZoomInIcon';
import ZoomOutIcon from '../icons/ZoomOutIcon';
import RefreshCwIcon from '../icons/RefreshCwIcon';


type AnalysisTab = 'summary' | 'impact' | 'legal' | 'narrative';

const getSeverityBadgeClass = (severity: 'Low' | 'Medium' | 'High') => {
    switch (severity) {
        case 'Low': return 'bg-blue-500/20 text-blue-300 border-blue-500/30';
        case 'Medium': return 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30';
        case 'High': return 'bg-red-500/20 text-red-300 border-red-500/30';
        default: return 'bg-gray-500/20 text-gray-300 border-gray-500/30';
    }
};

const ReportResult: React.FC = () => {
    const { reportResponse: response, incidentData: originalData } = useIncidentReportState();
    const { reset: onStartOver } = useIncidentReportActions();
    const reportRef = useRef<HTMLDivElement>(null);
    const [isExportingPdf, setIsExportingPdf] = useState(false);
    const { isSpeaking, isPaused, speak, cancel, pause, resume } = useTextToSpeech();
    const textSizer = useTextSizer();
    const [activeTab, setActiveTab] = useState<AnalysisTab>('summary');
    const [renderAllForPdf, setRenderAllForPdf] = useState(false);

    const handleExportPdf = useCallback(async () => {
        if (!reportRef.current) return;
        
        setIsExportingPdf(true);
        setRenderAllForPdf(true);

        await new Promise(resolve => setTimeout(resolve, 100));

        try {
            const isoDate = getISODate();
            const friendlyDate = getFormattedDate();
            const filename = `CustodyBuddy-Incident-Report-${isoDate}.pdf`;
            const headerText = `Incident Report - Generated by CustodyBuddy.com on ${friendlyDate}`;
            await exportElementAsPDF(reportRef.current, filename, headerText);
        } catch (error) {
            console.error("Failed to export PDF:", error);
            alert("Sorry, there was an issue creating the PDF. Please try again.");
        } finally {
            setRenderAllForPdf(false);
            setIsExportingPdf(false);
        }
    }, [reportRef]);

    const handlePlayPause = useCallback(() => {
        if (!response) return;
        if (!isSpeaking) {
            const plainText = cleanReportForSpeech(response);
            speak(plainText);
        } else if (isPaused) {
            resume();
        } else {
            pause();
        }
    }, [isSpeaking, isPaused, speak, pause, resume, response]);

    const handleStop = useCallback(() => {
        cancel();
    }, [cancel]);

    const generateReportText = useCallback(() => {
        if (!response || !originalData) return '';
        let text = `INCIDENT REPORT\n`;
        text += `========================================\n\n`;
        text += `Title: ${response.title}\n`;
        text += `Category: ${response.category}\n`;
        text += `Severity: ${response.severity} (${response.severityJustification})\n\n`;
        text += `----------------------------------------\n`;
        text += `Date & Time: ${originalData.dateTime}\n`;
        text += `Location: ${originalData.location}\n`;
        text += `Parties Involved: ${originalData.involvedParties}\n`;
        text += `Jurisdiction: ${originalData.jurisdiction}\n\n`;
        text += `----------------------------------------\n`;
        text += `PROFESSIONAL SUMMARY\n`;
        text += `----------------------------------------\n`;
        text += `${response.professionalSummary}\n\n`;
        text += `----------------------------------------\n`;
        text += `OBSERVED IMPACT\n`;
        text += `----------------------------------------\n`;
        text += `${response.observedImpact}\n\n`;
        text += `----------------------------------------\n`;
        text += `LEGAL INSIGHTS & STRATEGY (FOR INFORMATIONAL PURPOSES)\n`;
        text += `----------------------------------------\n`;
        text += `${response.legalInsights}\n\n`;
        text += `SOURCES:\n`;
        response.sources.forEach(source => text += `- ${source}\n`);
        text += `\n`;
        text += `----------------------------------------\n`;
        text += `AI NOTES\n`;
        text += `----------------------------------------\n`;
        text += `${response.aiNotes}\n\n`;
        text += `\n\n========================================\n`;
        text += `Original Narrative (for reference):\n${originalData.narrative}\n\n`;
        text += `**Disclaimer: This is an AI-generated report and does not constitute legal advice. It is for informational purposes only.**\n`;
        return text;
    }, [response, originalData]);


    const handleExportTxt = useCallback(() => {
        const reportText = generateReportText();
        const date = getISODate();
        const filename = `CustodyBuddy-Incident-Report-${date}.txt`;
        exportTextFile(reportText, filename);
    }, [generateReportText]);
    
    if (!response || !originalData) {
        return (
            <div className="flex flex-col items-center justify-center p-8 text-center">
                <p className="text-gray-400">Could not load report data.</p>
                <button
                    onClick={onStartOver}
                    className="mt-4 flex items-center gap-2 text-sm text-amber-400 hover:text-amber-300 font-semibold transition-colors"
                >
                    <RotateCwIcon className="w-4 h-4" />
                    Start Over
                </button>
            </div>
        );
    }
    
    const tabConfig: { id: AnalysisTab; label: string; icon: React.ReactNode; }[] = [
        { id: 'summary', label: 'Summary', icon: <LightbulbIcon className="w-4 h-4" /> },
        { id: 'impact', label: 'Impact', icon: <AlertTriangleIcon className="w-4 h-4" /> },
        { id: 'legal', label: 'Legal Insights', icon: <GavelIcon className="w-4 h-4" /> },
        { id: 'narrative', label: 'Original Narrative', icon: <FileTextIcon className="w-4 h-4" /> },
    ];

    const linkifiedLegalInsights = linkifyLegislation(response.legalInsights, originalData.jurisdiction);

    return (
        <div className="space-y-6 animate-fade-in">
            {/* --- CONTROLS --- */}
            <div className="flex flex-col gap-4 md:flex-row md:justify-between items-start md:items-center">
                 <div className="flex-grow">
                    <h3 className="text-xl font-bold text-amber-400">{response.title}</h3>
                </div>
                <div className="flex flex-wrap items-center justify-start gap-2">
                    <button
                        onClick={onStartOver}
                        className="flex items-center gap-2 text-sm text-amber-400 hover:text-amber-300 font-semibold transition-colors"
                    >
                        <RotateCwIcon className="w-4 h-4" />
                        New Report
                    </button>
                    <div className="h-6 w-px bg-slate-700 mx-1 hidden sm:block"></div>
                    
                    <div className="flex items-center gap-2">
                        <button onClick={handlePlayPause} className="flex items-center gap-2 bg-slate-700 hover:bg-slate-600 text-white font-semibold py-2 px-3 rounded-lg transition-all text-sm" aria-label={!isSpeaking ? "Read report aloud" : isPaused ? "Resume reading" : "Pause reading"}>
                            {!isSpeaking || isPaused ? <SpeakerIcon className="w-4 h-4" /> : <PauseIcon className="w-4 h-4" />}
                        </button>
                        {isSpeaking && (
                            <button onClick={handleStop} className="p-2 bg-slate-700 hover:bg-slate-600 text-white rounded-lg transition-all" aria-label="Stop reading report">
                                <StopCircleIcon className="w-5 h-5" />
                            </button>
                        )}
                        <button onClick={handleExportTxt} className="flex items-center gap-2 bg-slate-700 hover:bg-slate-600 text-white font-semibold py-2 px-3 rounded-lg transition-all text-sm" aria-label="Export as text file">
                            <DownloadIcon className="w-4 h-4" />
                        </button>
                        <button onClick={handleExportPdf} disabled={isExportingPdf} className="flex items-center gap-2 bg-slate-700 hover:bg-slate-600 text-white font-semibold py-2 px-3 rounded-lg transition-all text-sm disabled:opacity-70 disabled:cursor-wait" aria-label={isExportingPdf ? "Creating PDF, please wait" : "Export as PDF file"}>
                            {isExportingPdf ? <SpinnerIcon className="w-4 h-4" /> : <FilePdfIcon className="w-4 h-4" />}
                        </button>
                    </div>

                     <div className="flex items-center gap-1 p-1 bg-slate-700 rounded-lg">
                        <button onClick={textSizer.decrease} disabled={textSizer.scale <= MIN_SCALE} className="p-1.5 text-white rounded-md hover:bg-slate-600 disabled:opacity-50 disabled:cursor-not-allowed" aria-label="Decrease text size">
                            <ZoomOutIcon className="w-5 h-5" />
                        </button>
                         <button onClick={textSizer.reset} className="p-1.5 text-white rounded-md hover:bg-slate-600" aria-label="Reset text size">
                            <RefreshCwIcon className="w-5 h-5" />
                        </button>
                         <button onClick={textSizer.increase} disabled={textSizer.scale >= MAX_SCALE} className="p-1.5 text-white rounded-md hover:bg-slate-600 disabled:opacity-50 disabled:cursor-not-allowed" aria-label="Increase text size">
                            <ZoomInIcon className="w-5 h-5" />
                        </button>
                    </div>
                </div>
            </div>

            {/* --- REPORT CONTAINER --- */}
            <div className="bg-slate-900 border border-slate-700 rounded-lg">

                {/* --- TABS --- */}
                <div className={`flex border-b border-slate-700 overflow-x-auto ${renderAllForPdf ? 'hidden' : ''}`}>
                    {tabConfig.map(tab => (
                        <button
                            key={tab.id}
                            onClick={() => setActiveTab(tab.id)}
                            className={`flex items-center gap-2 px-4 py-3 text-sm font-semibold transition-colors border-b-2 flex-shrink-0 ${activeTab === tab.id ? 'border-amber-400 text-amber-400' : 'border-transparent text-gray-400 hover:text-white'}`}
                            role="tab"
                            aria-selected={activeTab === tab.id}
                        >
                            {tab.icon}
                            {tab.label}
                        </button>
                    ))}
                </div>

                {/* --- CONTENT --- */}
                <div ref={reportRef} className="p-6 prose prose-invert max-w-none">
                    <div className="flex flex-col sm:flex-row gap-4 justify-between items-start mb-6 border-b border-slate-700 pb-4 not-prose">
                        <div>
                            <span className="block text-xs text-gray-400 uppercase font-semibold">Category</span>
                            <span className="text-base font-bold text-gray-200">{response.category}</span>
                        </div>
                        <div className="text-left sm:text-right">
                             <span className="block text-xs text-gray-400 uppercase font-semibold">Severity</span>
                             <div className={`inline-flex items-center gap-2 text-base font-bold px-3 py-1 rounded-full border text-center ${getSeverityBadgeClass(response.severity)}`}>
                                {response.severity}
                             </div>
                        </div>
                    </div>
                    

                    {(activeTab === 'summary' || renderAllForPdf) && (
                        <section className={renderAllForPdf ? 'mb-8' : ''}>
                            <h4 className="font-bold text-lg text-gray-200 mb-2">Professional Summary</h4>
                            <div className="text-gray-300 leading-relaxed" dangerouslySetInnerHTML={{ __html: formatMarkdown(response.professionalSummary) }} />
                            <div className="mt-4 p-3 bg-slate-800/50 border-l-4 border-amber-400 rounded-r-lg not-prose">
                                <p className="text-sm text-amber-300 font-semibold">Severity Justification</p>
                                <p className="text-sm text-gray-400 italic">"{response.severityJustification}"</p>
                            </div>
                        </section>
                    )}

                    {(activeTab === 'impact' || renderAllForPdf) && (
                         <section className={renderAllForPdf ? 'mb-8' : ''}>
                            <h4 className="font-bold text-lg text-gray-200 mb-2">Observed Impact</h4>
                             <div className="text-gray-300 leading-relaxed" dangerouslySetInnerHTML={{ __html: formatMarkdown(response.observedImpact) }} />
                        </section>
                    )}

                    {(activeTab === 'legal' || renderAllForPdf) && (
                        <section className={renderAllForPdf ? 'mb-8' : ''}>
                            <div className="space-y-6">
                                <div>
                                    <h4 className="font-bold text-lg text-gray-200 mb-2">Legal Insights &amp; Strategy</h4>
                                    <div className="text-gray-300 leading-relaxed" dangerouslySetInnerHTML={{ __html: formatMarkdown(linkifiedLegalInsights) }} />
                                    <p className="text-xs text-gray-500 mt-3">*For informational purposes only. Not legal advice. Verify sources independently.</p>
                                </div>
                                 <div>
                                    <h4 className="font-bold text-lg text-gray-200 mb-2">Potential Sources</h4>
                                    <ul className="list-disc pl-5 space-y-1 text-amber-400">
                                        {response.sources.map((item, i) => <li key={i}><span className="text-gray-300">{item}</span></li>)}
                                    </ul>
                                </div>
                                <div>
                                     <h4 className="font-bold text-lg text-gray-200 mb-2">AI Notes on Documentation</h4>
                                     <div className="p-3 bg-slate-800/50 rounded-lg not-prose">
                                         <p className="text-gray-400 italic text-sm">{response.aiNotes}</p>
                                     </div>
                                </div>
                            </div>
                        </section>
                    )}

                    {(activeTab === 'narrative' || renderAllForPdf) && (
                        <section className="pt-6 border-t border-slate-700/50 mt-6">
                             <h4 className="font-bold text-lg text-gray-200 mb-2">Original Narrative (for reference)</h4>
                             <div className="p-3 bg-slate-800 rounded-md border border-slate-700 not-prose">
                                <p className="text-gray-400 whitespace-pre-wrap font-mono text-sm">{originalData.narrative || 'No narrative provided.'}</p>
                             </div>
                        </section>
                    )}
                </div>

                <div className="border-t border-slate-700 no-pdf">
                    <Feedback />
                </div>
            </div>
        </div>
    );
};

export default React.memo(ReportResult);