import React, { useRef, useState } from 'react';
import { useIncidentReportState, useIncidentReportActions } from '../../hooks/useIncidentReporter';
import { formatMarkdown } from '../../utils/markdownParser';
import { useTextToSpeech } from '../../hooks/useTextToSpeech';
import { useTextSizer, MIN_SCALE, MAX_SCALE } from '../../hooks/useTextSizer';
import { exportElementAsPDF, exportTextFile } from '../../utils/exportUtils';
import { getISODate, getFormattedDate } from '../../utils/dateUtils';
import { cleanReportForSpeech, linkifyLegislation, getDomainFromUrl } from '../../utils/stringUtils';

import Feedback from '../Feedback';
import SpeakerIcon from '../icons/SpeakerIcon';
import StopCircleIcon from '../icons/StopCircleIcon';
import PauseIcon from '../icons/PauseIcon';
import SpinnerIcon from '../icons/SpinnerIcon';
import FilePdfIcon from '../icons/FilePdfIcon';
import DownloadIcon from '../icons/DownloadIcon';
import RotateCwIcon from '../icons/RotateCwIcon';
import ZoomInIcon from '../icons/ZoomInIcon';
import ZoomOutIcon from '../icons/ZoomOutIcon';
import RefreshCwIcon from '../icons/RefreshCwIcon';
import AlertTriangleIcon from '../icons/AlertTriangleIcon';
import LightbulbIcon from '../icons/LightbulbIcon';
import GavelIcon from '../icons/GavelIcon';
import UsersIcon from '../icons/UsersIcon';
import ExternalLinkIcon from '../icons/ExternalLinkIcon';


const severityStyles: { [key: string]: string } = {
    Low: 'bg-green-500/20 text-green-300 border-green-500/30',
    Medium: 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30',
    High: 'bg-red-500/20 text-red-300 border-red-500/30',
};

const ReportResult: React.FC = () => {
    const { reportResponse: report, incidentData } = useIncidentReportState();
    const { reset } = useIncidentReportActions();
    const reportRef = useRef<HTMLDivElement>(null);
    const { isSpeaking, isPaused, speak, cancel, pause, resume } = useTextToSpeech();
    const [isExportingPdf, setIsExportingPdf] = useState(false);
    const textSizer = useTextSizer();

    if (!report) {
        return (
            <div className="text-center p-4 text-gray-400">
                <p>No report data to display.</p>
            </div>
        );
    }

    const handleExportPdf = async () => {
        if (!reportRef.current) return;
        setIsExportingPdf(true);
        try {
            const isoDate = getISODate();
            const friendlyDate = getFormattedDate();
            const filename = `CustodyBuddy-Incident-Report-${isoDate}.pdf`;
            const headerText = `AI Incident Report - Generated by CustodyBuddy.com on ${friendlyDate}`;
            await exportElementAsPDF(reportRef.current, filename, headerText);
        } catch (error) {
            console.error("Failed to export PDF:", error);
            alert("Sorry, there was an issue creating the PDF. Please try again.");
        } finally {
            setIsExportingPdf(false);
        }
    };

    const handleExportTxt = () => {
        if (!report) return;
        const isoDate = getISODate();
        const filename = `CustodyBuddy-Incident-Report-${isoDate}.txt`;
        const content = `
CUSTODYBUDDY AI INCIDENT REPORT
Generated: ${getFormattedDate()}
Disclaimer: This is an AI-generated report for informational purposes only and is not a substitute for legal advice.

--- INCIDENT DETAILS ---
Title: ${report.title}
Category: ${report.category}
Severity: ${report.severity}
Justification: ${report.severityJustification}

--- PROFESSIONAL SUMMARY ---
${report.professionalSummary}

--- OBSERVED IMPACT ON CHILDREN ---
${report.observedImpact}

--- LEGAL INSIGHTS (JURISDICTION: ${incidentData.jurisdiction}) ---
${report.legalInsights}

--- AI NOTES & RECOMMENDATIONS ---
${report.aiNotes}

--- POTENTIAL RESOURCES ---
${report.sources.map(s => `- ${s}`).join('\n')}
        `;
        exportTextFile(content.trim(), filename);
    };

    const handlePlayPause = () => {
        if (!report) return;
        if (!isSpeaking) {
            speak(cleanReportForSpeech(report));
        } else if (isPaused) {
            resume();
        } else {
            pause();
        }
    };
    
    const handleStop = () => cancel();

    return (
        <div className="animate-fade-in-up">
            <div className="flex flex-col gap-4 md:flex-row md:justify-between items-start md:items-center p-4 bg-slate-800 border border-slate-700 rounded-t-lg">
                 <div className="flex-grow">
                    <h3 className="text-xl font-bold text-amber-400 flex-shrink-0">AI Incident Report</h3>
                 </div>
                 <div className="flex flex-wrap items-center justify-start gap-2">
                    <button onClick={reset} className="flex items-center gap-2 bg-slate-700 hover:bg-slate-600 text-white font-semibold py-2 px-3 rounded-lg transition-all text-sm">
                        <RotateCwIcon className="w-4 h-4" />
                        <span>New Report</span>
                    </button>
                    <div className="flex items-center gap-1 p-1 bg-slate-700 rounded-lg">
                        <button onClick={textSizer.decrease} disabled={textSizer.scale <= MIN_SCALE} className="p-1.5 text-white rounded-md hover:bg-slate-600 disabled:opacity-50" aria-label="Decrease text size"><ZoomOutIcon className="w-5 h-5" /></button>
                        <button onClick={textSizer.reset} className="p-1.5 text-white rounded-md hover:bg-slate-600" aria-label="Reset text size"><RefreshCwIcon className="w-5 h-5" /></button>
                        <button onClick={textSizer.increase} disabled={textSizer.scale >= MAX_SCALE} className="p-1.5 text-white rounded-md hover:bg-slate-600 disabled:opacity-50" aria-label="Increase text size"><ZoomInIcon className="w-5 h-5" /></button>
                    </div>
                 </div>
            </div>

            <div ref={reportRef} className="p-6 bg-slate-900 border-x border-b border-slate-700 rounded-b-lg prose prose-invert max-w-none">
                <div className="not-prose mb-8">
                    <h1 className="text-2xl font-bold text-gray-100 mb-2">{report.title}</h1>
                    <div className="flex flex-wrap gap-4 text-sm">
                        <div className="flex items-center gap-2">
                            <strong className="text-gray-400">Category:</strong>
                            <span className="font-semibold text-gray-200">{report.category}</span>
                        </div>
                        <div className="flex items-center gap-2">
                            <strong className="text-gray-400">Severity:</strong>
                            <span className={`font-semibold px-2 py-0.5 rounded-md text-xs border ${severityStyles[report.severity]}`}>{report.severity}</span>
                        </div>
                    </div>
                    <p className={`mt-2 text-sm italic p-2 rounded-md ${severityStyles[report.severity]}`}>{report.severityJustification}</p>
                </div>
                
                <section className="space-y-8">
                    <div>
                        <h4 className="text-xl font-bold text-gray-200 mb-3 flex items-center gap-2"><UsersIcon />Professional Summary</h4>
                        <div className="leading-relaxed" dangerouslySetInnerHTML={{ __html: formatMarkdown(report.professionalSummary) }} />
                    </div>
                    <div>
                        <h4 className="text-xl font-bold text-gray-200 mb-3 flex items-center gap-2"><AlertTriangleIcon className="text-yellow-400 w-5 h-5" />Observed Impact on Children</h4>
                        <div className="leading-relaxed" dangerouslySetInnerHTML={{ __html: formatMarkdown(report.observedImpact) }} />
                    </div>
                    <div>
                        <h4 className="text-xl font-bold text-gray-200 mb-3 flex items-center gap-2"><GavelIcon className="text-amber-400 w-5 h-5" />Legal Insights ({incidentData.jurisdiction})</h4>
                        <div className="leading-relaxed" dangerouslySetInnerHTML={{ __html: formatMarkdown(linkifyLegislation(report.legalInsights, incidentData.jurisdiction)) }} />
                    </div>
                    <div>
                        <h4 className="text-xl font-bold text-gray-200 mb-3 flex items-center gap-2"><LightbulbIcon className="text-amber-400 w-5 h-5" />AI Notes & Recommendations</h4>
                        <div className="leading-relaxed" dangerouslySetInnerHTML={{ __html: formatMarkdown(report.aiNotes) }} />
                    </div>
                    {report.sources && report.sources.length > 0 && (
                        <div>
                             <h4 className="text-xl font-bold text-gray-200 mb-3">Potential Sources</h4>
                             <ul className="list-disc pl-5 space-y-2">
                                {report.sources.map((source, i) => (
                                    <li key={i}>
                                        <a href={source} target="_blank" rel="noopener noreferrer" className="text-amber-300 hover:underline inline-flex items-center gap-1.5 group">
                                            <span className="group-hover:text-amber-200">{getDomainFromUrl(source)}</span>
                                            <ExternalLinkIcon />
                                        </a>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    )}
                </section>
                
                <div className="pt-6 border-t border-slate-700/50 mt-8">
                    <p className="text-xs text-gray-500 italic">Disclaimer: This is an AI-generated report for informational purposes and is not a substitute for legal advice. Review for accuracy.</p>
                    <div className="no-pdf flex flex-wrap gap-4 justify-between items-center mt-4">
                        <div className="flex items-center gap-2">
                            <button onClick={handlePlayPause} className="flex items-center gap-2 bg-slate-800 hover:bg-slate-700 text-white font-semibold py-2 px-3 rounded-lg transition-all text-sm" aria-label={!isSpeaking ? "Read report aloud" : isPaused ? "Resume reading" : "Pause reading"}>
                                {!isSpeaking || isPaused ? <SpeakerIcon className="w-4 h-4" /> : <PauseIcon className="w-4 h-4" />}
                                <span>{!isSpeaking ? 'Read' : isPaused ? 'Resume' : 'Pause'}</span>
                            </button>
                            {isSpeaking && (
                                <button onClick={handleStop} className="p-2 bg-slate-800 hover:bg-slate-700 text-white rounded-lg transition-all" aria-label="Stop reading report"><StopCircleIcon className="w-5 h-5" /></button>
                            )}
                        </div>
                        <div className="flex items-center gap-2">
                             <button onClick={handleExportTxt} className="flex items-center gap-2 bg-slate-800 hover:bg-slate-700 text-white font-semibold py-2 px-3 rounded-lg transition-all text-sm" aria-label="Export as text file">
                                <DownloadIcon className="w-4 h-4" />
                                <span>TXT</span>
                            </button>
                            <button onClick={handleExportPdf} disabled={isExportingPdf} className="flex items-center gap-2 bg-slate-800 hover:bg-slate-700 text-white font-semibold py-2 px-3 rounded-lg transition-all text-sm disabled:opacity-70 disabled:cursor-wait" aria-label={isExportingPdf ? "Creating PDF, please wait" : "Export as a PDF file"}>
                                {isExportingPdf ? <SpinnerIcon className="w-4 h-4" /> : <FilePdfIcon className="w-4 h-4" />}
                                <span>PDF</span>
                            </button>
                        </div>
                    </div>
                    <Feedback />
                </div>
            </div>
        </div>
    );
};

export default React.memo(ReportResult);